# # # Klipper Adaptive Meshing # # #

# Heads up! If you have any other BED_MESH_CALIBRATE macros defined elsewhere in your config, you will need to comment out / remove them for this to work. (Klicky/Euclid Probe)
# You will also need to be sure that [exclude_object] is defined in printer.cfg, and your slicer is labeling objects.
# This macro will parse information from objects in your gcode to define a min and max mesh area to probe, creating an adaptive mesh!
# This macro will not increase round_probe_count values in your [bed_mesh] config. If you want richer meshes, be sure to increase round_probe_count. We recommend at least 7.

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:

    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') |  sum(start=[]) %}                                # Gather all object points
    {% set round_probe_count = printer.configfile.settings.bed_mesh.round_probe_count %}                                            # Get probe count from printer.cfg
    {% set mesh_origin = printer.configfile.settings.bed_mesh.mesh_origin %}                                                        # Get bed mesh radius from printer.cfg
    {% set mesh_radius = printer.configfile.settings.bed_mesh.mesh_radius %}                                                        # Get bed mesh radius from printer.cfg
    {% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}                                           # Pull verbose setting from _KAMP_Settings
    {% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}                                     # Pull probe dockable probe settings from _KAMP_Settings
    {% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}                                            # Pull attach probe command from _KAMP_Settings
    {% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}                                            # Pull detach probe command from _KAMP_Settings
    {% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}                                               # Pull mesh margin setting from _KAMP_Settings
    {% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}                                               # Pull fuzz amount setting from _KAMP_Settings
    {% set max_probe_point_distance = ( mesh_radius ) / (round_probe_count) %}                                                      # Determine max probe point distance
    {% set x_min = all_points | map(attribute=0) | min | default(mesh_origin[0]) %}                                                 # Set x_min from smallest object x point
    {% set y_min = all_points | map(attribute=1) | min | default(mesh_origin[1]) %}                                                 # Set y_min from smallest object y point
    {% set x_max = all_points | map(attribute=0) | max | default(mesh_radius) %}                                                    # Set x_max from largest object x point
    {% set y_max = all_points | map(attribute=1) | max | default(mesh_radius) %}                                                    # Set x_max from largest object x point

    {% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}                                                          # Set fuzz_range between 0 and fuzz_amount
    {% set adapted_min = (mesh_origin[0] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}               # Adapt y_min to margin and fuzz constraints
    {% set adapted_max = (mesh_radius - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}                  # Adapt y_max to margin and fuzz constraints

    {% set adapted_min = [adapted_min , mesh_origin[0]] | max %}                                                                    # Compare adjustments to defaults and choose max
    {% set adapted_max = [adapted_max , mesh_radius] | min %}                                                                       # Compare adjustments to defaults and choose min

    {% set points = (((adapted_max - adapted_min) / max_probe_point_distance) | round(method='ceil') | int) + 1 %}                  # Define probe_count's x point count and round up

    {% if (points > 6) %}                                                                                                           # 
        {% set algorithm = "bicubic" %}                                                                                             # 
        {% set min_points = 5 %}                                                                                                    # 
    {% else %}                                                                                                                      # Calculate if algorithm should be bicubic or lagrange
        {% set algorithm = "lagrange" %}                                                                                            # 
        {% set min_points = 3 %}                                                                                                    # 
    {% endif %}                                                                                                                     # 

    {% set points = [points , min_points]|max %}                                                                                    # Set probe_count's points to fit the calculated algorithm
    {% set points = [points , round_probe_count]|min %}

    {% if (points %2 == 0) %}
        {% set points = (points -1) %}
    {% endif %}                                                                                                                     # Ensure to use odd number for round beds

    {% if verbose_enable == True %}                                                                                                 # If verbose is enabled, print information about KAMP's calculations

        { action_respond_info( "Algorithm: {}.".format(                                                                              
            (algorithm),                                                                                                            
        )) }

        { action_respond_info("Default probe count: {}".format(                                                                  
            (round_probe_count),                                                                                                       
        )) }

        { action_respond_info("Adapted probe count: {}".format(                                                                  
            (points),                                                                                                           
        )) }     

        {% if mesh_margin > 0 %}                                                                                                    
            {action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(                                       
                (mesh_margin),                                                                                                      
                (mesh_margin),                                                                                       
            )) }                                                                                                                    
        {% else %}                                                                                                                  
            {action_respond_info("Mesh margin is 0, margin not increased.")}                                                        
        {% endif %}                                                                                                          

        {% if fuzz_amount > 0 %}                                                                                                    
            {action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(                                     
                (fuzz_amount),                                                                                                      
            )) }                                                                       
        {% else %}                                                                                                                  
            {action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}                                                      
        {% endif %}

        { action_respond_info("Adapted min mesh bounds: {}".format(                                                                 
            (adapted_min),                                                                                        
        )) }
        { action_respond_info("Adapted max mesh bounds: {}".format(                                                                 
            (adapted_max),                                                                                        
        )) }

        {action_respond_info("KAMP adjustments successful. Happy KAMPing!")}

    {% endif %}

    {% if probe_dock_enable == True %}
        {attach_macro}                                                                                                              # Attach/deploy a probe if the probe is stored somewhere outside of the print area
    {% endif %}

    _BED_MESH_CALIBRATE verbose_enable=False, mesh_radius={adapted_max} ALGORITHM={algorithm} PROBE_COUNT={points}

    {% if probe_dock_enable == True %}
        {detach_macro}                                                                                                              # Detach/stow a probe if the probe is stored somewhere outside of the print area
    {% endif %}                                                                                                                     # End of verbose